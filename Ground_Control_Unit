#include <SPI.h>
#include <LoRa.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define ss 5
#define rst 14
#define dio0 2
#define BAND 433E6  // Adjust the frequency band as needed
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
int counter = 0;
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

void setup() {
  Serial.begin(9600);
  startLoRa();
  pinMode(33, OUTPUT);
  pinMode(25, OUTPUT);

  Serial.println("LoRa, GPS, and LED Initialization OK!");
   if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  display.clearDisplay();

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
  display.println("COONTROL UNIT");
  display.display(); 

}

void startLoRa() {
  LoRa.setPins(ss, rst, dio0);
  while (!LoRa.begin(BAND) && counter < 10) {
    Serial.print(".");
    counter++;
    delay(500);
  }
  if (counter == 10) {
    Serial.println("Starting LoRa failed!");
  } else {
    Serial.println("LoRa Initialization OK!");
  }
  delay(800);
}

void receivedData() {
  unsigned long startTime = millis();    // Record the start time
  while (millis() - startTime < 2000) {  // Check for received messages for 1 second
    int packetSize = LoRa.parsePacket();
    if (packetSize) {
      String receivedMessage = "";
      while (LoRa.available()) {
        receivedMessage += (char)LoRa.read();
      }
      Serial.println(receivedMessage);

      if (receivedMessage.indexOf("UP22XY0001,") != -1) {
        blinkLED(33);
      } else if (receivedMessage.indexOf("UP22XY0002,") != -1) {
        blinkLED(25);
      }
      return;
    }
  }
}

void blinkLED(int pin) {
  digitalWrite(pin, HIGH);
  delay(200);
  digitalWrite(pin, LOW);
}

void ReadSerialData() {
  {
    if (Serial.available() > 0) {
      String command = Serial.readString();
      sendData(command);
    }
  }
}

void sendData(String message) {
  LoRa.beginPacket();
  LoRa.print(message);
  LoRa.endPacket();
}

void loop() {
  receivedData();
  ReadSerialData();
}
